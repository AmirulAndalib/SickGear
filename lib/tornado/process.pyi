import subprocess
from tornado_py3 import ioloop as ioloop
from tornado_py3.concurrent import Future as Future, future_set_exception_unless_cancelled as future_set_exception_unless_cancelled, future_set_result_unless_cancelled as future_set_result_unless_cancelled
from tornado_py3.iostream import PipeIOStream as PipeIOStream
from tornado_py3.log import gen_log as gen_log
from tornado_py3.platform.auto import set_close_exec as set_close_exec
from tornado_py3.util import errno_from_exception as errno_from_exception
from typing import Any, Callable, Optional

CalledProcessError = subprocess.CalledProcessError

def cpu_count() -> int: ...
def fork_processes(num_processes: Optional[int], max_restarts: int=...) -> int: ...
def task_id() -> Optional[int]: ...

class Subprocess:
    STREAM: Any = ...
    io_loop: Any = ...
    stdin: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    proc: Any = ...
    pid: Any = ...
    returncode: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_exit_callback(self, callback: Callable[[int], None]) -> None: ...
    def wait_for_exit(self, raise_error: bool=...) -> Future[int]: ...
    @classmethod
    def initialize(cls: Any) -> None: ...
    @classmethod
    def uninitialize(cls: Any) -> None: ...
