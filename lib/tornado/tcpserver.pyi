import socket
import ssl
from tornado_py3 import gen as gen, process as process
from tornado_py3.ioloop import IOLoop as IOLoop
from tornado_py3.iostream import IOStream as IOStream, SSLIOStream as SSLIOStream
from tornado_py3.log import app_log as app_log
from tornado_py3.netutil import add_accept_handler as add_accept_handler, bind_sockets as bind_sockets, ssl_wrap_socket as ssl_wrap_socket
from tornado_py3.util import errno_from_exception as errno_from_exception
from typing import Any, Awaitable, Dict, Iterable, Optional, Union

class TCPServer:
    ssl_options: Any = ...
    max_buffer_size: Any = ...
    read_chunk_size: Any = ...
    def __init__(self, ssl_options: Union[Dict[str, Any], ssl.SSLContext]=..., max_buffer_size: int=..., read_chunk_size: int=...) -> None: ...
    def listen(self, port: int, address: str=...) -> None: ...
    def add_sockets(self, sockets: Iterable[socket.socket]) -> None: ...
    def add_socket(self, socket: socket.socket) -> None: ...
    def bind(self, port: int, address: str=..., family: socket.AddressFamily=..., backlog: int=..., reuse_port: bool=...) -> None: ...
    def start(self, num_processes: Optional[int]=..., max_restarts: int=...) -> None: ...
    def stop(self) -> None: ...
    def handle_stream(self, stream: IOStream, address: tuple) -> Optional[Awaitable[None]]: ...
