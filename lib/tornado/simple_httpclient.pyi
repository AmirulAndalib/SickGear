from tornado_py3 import gen as gen, httputil as httputil
from tornado_py3.http1connection import HTTP1Connection as HTTP1Connection, HTTP1ConnectionParameters as HTTP1ConnectionParameters
from tornado_py3.httpclient import AsyncHTTPClient as AsyncHTTPClient, HTTPError as HTTPError, HTTPRequest as HTTPRequest, HTTPResponse as HTTPResponse, main as main
from tornado_py3.ioloop import IOLoop as IOLoop
from tornado_py3.iostream import IOStream as IOStream, StreamClosedError as StreamClosedError
from tornado_py3.log import gen_log as gen_log
from tornado_py3.netutil import OverrideResolver as OverrideResolver, Resolver as Resolver, is_valid_ip as is_valid_ip
from tornado_py3.tcpclient import TCPClient as TCPClient
from typing import Any, Callable, Dict, Optional, Union

class HTTPTimeoutError(HTTPError):
    def __init__(self, message: str) -> None: ...

class HTTPStreamClosedError(HTTPError):
    def __init__(self, message: str) -> None: ...

class SimpleAsyncHTTPClient(AsyncHTTPClient):
    max_clients: Any = ...
    queue: Any = ...
    active: Any = ...
    waiting: Any = ...
    max_buffer_size: Any = ...
    max_header_size: Any = ...
    max_body_size: Any = ...
    resolver: Any = ...
    own_resolver: bool = ...
    tcp_client: Any = ...
    def initialize(self, max_clients: int=..., hostname_mapping: Dict[str, str]=..., max_buffer_size: int=..., resolver: Resolver=..., defaults: Dict[str, Any]=..., max_header_size: int=..., max_body_size: int=...) -> None: ...
    def close(self) -> None: ...
    def fetch_impl(self, request: HTTPRequest, callback: Callable[[HTTPResponse], None]) -> None: ...

class _HTTPConnection(httputil.HTTPMessageDelegate):
    io_loop: Any = ...
    start_time: Any = ...
    start_wall_time: Any = ...
    client: Any = ...
    request: Any = ...
    release_callback: Any = ...
    final_callback: Any = ...
    max_buffer_size: Any = ...
    tcp_client: Any = ...
    max_header_size: Any = ...
    max_body_size: Any = ...
    code: Any = ...
    headers: Any = ...
    chunks: Any = ...
    def __init__(self, client: Optional[SimpleAsyncHTTPClient], request: HTTPRequest, release_callback: Callable[[], None], final_callback: Callable[[HTTPResponse], None], max_buffer_size: int, tcp_client: TCPClient, max_header_size: int, max_body_size: int) -> None: ...
    parsed: Any = ...
    parsed_hostname: Any = ...
    stream: Any = ...
    connection: Any = ...
    async def run(self) -> None: ...
    def on_connection_close(self) -> None: ...
    reason: Any = ...
    async def headers_received(self, first_line: Union[httputil.ResponseStartLine, httputil.RequestStartLine], headers: httputil.HTTPHeaders) -> None: ...
    def finish(self) -> None: ...
    def data_received(self, chunk: bytes) -> None: ...
