from typing import Any, Optional

def full_name(func: Any): ...

class WindowsError(Exception): ...

class Constant(tuple):
    def __new__(cls, name: Any): ...
    def __repr__(self): ...

DBNAME: str
ENOVAL: Any
UNKNOWN: Any
MODE_NONE: int
MODE_RAW: int
MODE_BINARY: int
MODE_TEXT: int
MODE_PICKLE: int
DEFAULT_SETTINGS: Any
METADATA: Any
EVICTION_POLICY: Any

class Disk:
    _directory: Any = ...
    min_file_size: Any = ...
    pickle_protocol: Any = ...
    def __init__(self, directory: Any, min_file_size: int = ..., pickle_protocol: int = ...) -> None: ...
    def hash(self, key: Any): ...
    def put(self, key: Any): ...
    def get(self, key: Any, raw: Any): ...
    def store(self, value: Any, read: Any, key: Any = ...): ...
    def fetch(self, mode: Any, filename: Any, value: Any, read: Any): ...
    def filename(self, key: Any = ..., value: Any = ...): ...
    def remove(self, filename: Any) -> None: ...

class JSONDisk(Disk):
    compress_level: Any = ...
    def __init__(self, directory: Any, compress_level: int = ..., **kwargs: Any) -> None: ...
    def put(self, key: Any): ...
    def get(self, key: Any, raw: Any): ...
    def store(self, value: Any, read: Any, key: Any = ...): ...
    def fetch(self, mode: Any, filename: Any, value: Any, read: Any): ...

class Timeout(Exception): ...
class UnknownFileWarning(UserWarning): ...
class EmptyDirWarning(UserWarning): ...

def args_to_key(base: Any, args: Any, kwargs: Any, typed: Any): ...

class Cache:
    _directory: Any = ...
    _timeout: int = ...
    _local: Any = ...
    _txn_id: Any = ...
    _disk: Any = ...
    def __init__(self, directory: Optional[Any] = ..., timeout: int = ..., disk: Any = ..., **settings: Any) -> None: ...
    @property
    def directory(self): ...
    @property
    def timeout(self): ...
    @property
    def disk(self): ...
    @property
    def _con(self): ...
    @property
    def _sql(self): ...
    @property
    def _sql_retry(self): ...
    def transact(self, retry: bool = ...) -> None: ...
    def _transact(self, retry: bool = ..., filename: Optional[Any] = ...) -> None: ...
    def set(self, key: Any, value: Any, expire: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def _row_update(self, rowid: Any, now: Any, columns: Any) -> None: ...
    def _row_insert(self, key: Any, raw: Any, now: Any, columns: Any) -> None: ...
    def _cull(self, now: Any, sql: Any, cleanup: Any, limit: Optional[Any] = ...) -> None: ...
    def touch(self, key: Any, expire: Optional[Any] = ..., retry: bool = ...): ...
    def add(self, key: Any, value: Any, expire: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def incr(self, key: Any, delta: int = ..., default: int = ..., retry: bool = ...): ...
    def decr(self, key: Any, delta: int = ..., default: int = ..., retry: bool = ...): ...
    def get(self, key: Any, default: Optional[Any] = ..., read: bool = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def __getitem__(self, key: Any): ...
    def read(self, key: Any, retry: bool = ...): ...
    def __contains__(self, key: Any): ...
    def pop(self, key: Any, default: Optional[Any] = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def __delitem__(self, key: Any, retry: bool = ...): ...
    def delete(self, key: Any, retry: bool = ...): ...
    def push(self, value: Any, prefix: Optional[Any] = ..., side: str = ..., expire: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def pull(self, prefix: Optional[Any] = ..., default: Any = ..., side: str = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def peek(self, prefix: Optional[Any] = ..., default: Any = ..., side: str = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def peekitem(self, last: bool = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def memoize(self, name: Optional[Any] = ..., typed: bool = ..., expire: Optional[Any] = ..., tag: Optional[Any] = ...): ...
    def check(self, fix: bool = ..., retry: bool = ...): ...
    def create_tag_index(self) -> None: ...
    def drop_tag_index(self) -> None: ...
    def evict(self, tag: Any, retry: bool = ...): ...
    def expire(self, now: Optional[Any] = ..., retry: bool = ...): ...
    def cull(self, retry: bool = ...): ...
    def clear(self, retry: bool = ...): ...
    def _select_delete(self, select: Any, args: Any, row_index: int = ..., arg_index: int = ..., retry: bool = ...): ...
    def iterkeys(self, reverse: bool = ...) -> None: ...
    def _iter(self, ascending: bool = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __reversed__(self): ...
    def stats(self, enable: bool = ..., reset: bool = ...): ...
    def volume(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exception: Any) -> None: ...
    def __len__(self): ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...
    def reset(self, key: Any, value: Any = ..., update: bool = ...): ...
