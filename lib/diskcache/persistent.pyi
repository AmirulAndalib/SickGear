from .core import Cache as Cache, ENOVAL as ENOVAL
from collections.abc import MutableMapping, Sequence
from typing import Any, Optional

def _make_compare(seq_op: Any, doc: Any): ...

class Deque(Sequence):
    _cache: Any = ...
    def __init__(self, iterable: Any = ..., directory: Optional[Any] = ...) -> None: ...
    @classmethod
    def fromcache(cls, cache: Any, iterable: Any = ...): ...
    @property
    def cache(self): ...
    @property
    def directory(self): ...
    def _index(self, index: Any, func: Any): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any): ...
    def __delitem__(self, index: Any) -> None: ...
    def __repr__(self): ...
    __eq__: Any = ...
    __ne__: Any = ...
    __lt__: Any = ...
    __gt__: Any = ...
    __le__: Any = ...
    __ge__: Any = ...
    def __iadd__(self, iterable: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __reversed__(self) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...
    def append(self, value: Any) -> None: ...
    def appendleft(self, value: Any) -> None: ...
    def clear(self) -> None: ...
    def count(self, value: Any): ...
    def extend(self, iterable: Any) -> None: ...
    def extendleft(self, iterable: Any) -> None: ...
    def peek(self): ...
    def peekleft(self): ...
    def pop(self): ...
    def popleft(self): ...
    def remove(self, value: Any) -> None: ...
    def reverse(self) -> None: ...
    def rotate(self, steps: int = ...) -> None: ...
    __hash__: Any = ...
    def transact(self) -> None: ...

class Index(MutableMapping):
    _cache: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def fromcache(cls, cache: Any, *args: Any, **kwargs: Any): ...
    @property
    def cache(self): ...
    @property
    def directory(self): ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def setdefault(self, key: Any, default: Optional[Any] = ...): ...
    def peekitem(self, last: bool = ...): ...
    def pop(self, key: Any, default: Any = ...): ...
    def popitem(self, last: bool = ...): ...
    def push(self, value: Any, prefix: Optional[Any] = ..., side: str = ...): ...
    def pull(self, prefix: Optional[Any] = ..., default: Any = ..., side: str = ...): ...
    def clear(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __reversed__(self): ...
    def __len__(self): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    __hash__: Any = ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def memoize(self, name: Optional[Any] = ..., typed: bool = ...): ...
    def transact(self) -> None: ...
    def __repr__(self): ...
