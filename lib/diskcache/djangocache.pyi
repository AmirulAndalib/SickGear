from .core import ENOVAL as ENOVAL, args_to_key as args_to_key, full_name as full_name
from .fanout import FanoutCache as FanoutCache
from django.core.cache.backends.base import BaseCache
from typing import Any, Optional

class DjangoCache(BaseCache):
    _cache: Any = ...
    def __init__(self, directory: Any, params: Any) -> None: ...
    @property
    def directory(self): ...
    def cache(self, name: Any): ...
    def deque(self, name: Any): ...
    def index(self, name: Any): ...
    def add(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def get(self, key: Any, default: Optional[Any] = ..., version: Optional[Any] = ..., read: bool = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def read(self, key: Any, version: Optional[Any] = ...): ...
    def set(self, key: Any, value: Any, timeout: Any = ..., version: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def touch(self, key: Any, timeout: Any = ..., version: Optional[Any] = ..., retry: bool = ...): ...
    def pop(self, key: Any, default: Optional[Any] = ..., version: Optional[Any] = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def delete(self, key: Any, version: Optional[Any] = ..., retry: bool = ...) -> None: ...
    def incr(self, key: Any, delta: int = ..., version: Optional[Any] = ..., default: Optional[Any] = ..., retry: bool = ...): ...
    def decr(self, key: Any, delta: int = ..., version: Optional[Any] = ..., default: Optional[Any] = ..., retry: bool = ...): ...
    def has_key(self, key: Any, version: Optional[Any] = ...): ...
    def expire(self): ...
    def stats(self, enable: bool = ..., reset: bool = ...): ...
    def create_tag_index(self) -> None: ...
    def drop_tag_index(self) -> None: ...
    def evict(self, tag: Any): ...
    def cull(self): ...
    def clear(self): ...
    def close(self, **kwargs: Any) -> None: ...
    def get_backend_timeout(self, timeout: Any = ...): ...
    def memoize(self, name: Optional[Any] = ..., timeout: Any = ..., version: Optional[Any] = ..., typed: bool = ..., tag: Optional[Any] = ...): ...
