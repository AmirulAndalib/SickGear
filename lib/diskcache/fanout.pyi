from .core import Cache as Cache, DEFAULT_SETTINGS as DEFAULT_SETTINGS, Disk as Disk, ENOVAL as ENOVAL, Timeout as Timeout
from .persistent import Deque as Deque, Index as Index
from typing import Any, Optional

class FanoutCache:
    _count: Any = ...
    _directory: Any = ...
    _shards: Any = ...
    _hash: Any = ...
    _caches: Any = ...
    _deques: Any = ...
    _indexes: Any = ...
    def __init__(self, directory: Optional[Any] = ..., shards: int = ..., timeout: float = ..., disk: Any = ..., **settings: Any) -> None: ...
    @property
    def directory(self): ...
    def __getattr__(self, name: Any): ...
    def transact(self, retry: bool = ...) -> None: ...
    def set(self, key: Any, value: Any, expire: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def touch(self, key: Any, expire: Optional[Any] = ..., retry: bool = ...): ...
    def add(self, key: Any, value: Any, expire: Optional[Any] = ..., read: bool = ..., tag: Optional[Any] = ..., retry: bool = ...): ...
    def incr(self, key: Any, delta: int = ..., default: int = ..., retry: bool = ...): ...
    def decr(self, key: Any, delta: int = ..., default: int = ..., retry: bool = ...): ...
    def get(self, key: Any, default: Optional[Any] = ..., read: bool = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def __getitem__(self, key: Any): ...
    def read(self, key: Any): ...
    def __contains__(self, key: Any): ...
    def pop(self, key: Any, default: Optional[Any] = ..., expire_time: bool = ..., tag: bool = ..., retry: bool = ...): ...
    def delete(self, key: Any, retry: bool = ...): ...
    def __delitem__(self, key: Any) -> None: ...
    def check(self, fix: bool = ..., retry: bool = ...): ...
    def expire(self, retry: bool = ...): ...
    def create_tag_index(self) -> None: ...
    def drop_tag_index(self) -> None: ...
    def evict(self, tag: Any, retry: bool = ...): ...
    def cull(self, retry: bool = ...): ...
    def clear(self, retry: bool = ...): ...
    def _remove(self, name: Any, args: Any = ..., retry: bool = ...): ...
    def stats(self, enable: bool = ..., reset: bool = ...): ...
    def volume(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exception: Any) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __reversed__(self): ...
    def __len__(self): ...
    def reset(self, key: Any, value: Any = ...): ...
    def cache(self, name: Any): ...
    def deque(self, name: Any): ...
    def index(self, name: Any): ...
